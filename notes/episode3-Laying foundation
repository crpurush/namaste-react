"scripts": {
    "start": "parcel index.html",
    "build": "parcel build index.html",
    "test": "jest"
  },
added start and build scripts
using "npm run start" or "npm start" and "npm run build" will do the same like before

==========================================================================
JSX - is not HTML in js, it is HTML like syntax
JSX is transpiled before reaching JS Engine by PARCEL using BABEL
JSX => Babel transpiles to React.createElement => ReactElement is JS Object => HTMLElement(render)
attributes in JSX to be camelcase like tabIndex not like tab-index in HTML
JSX in muliple line to be wrapped in ()
==========================================================================
React component
2 types
-> class based component (old)
-> Functional component (new) - normal js function returning jsx or react element (we can use normal function or arrow function)
Component name should start with Capital letter otherwise error thrown
ex:
const HeadingComponent = () => {
    return <h1>Namaste React using Functional Component</h1>;
}
for 1 line  returning in arrow we can write this way also

const HeadingComponent = () => <h1>Namaste React using Functional Component</h1>;

to put in multiple lines, put in parenthesis()
const HeadingComponent = () => (
  <h1>Namaste React using Functional Component</h1>;
)
when {} return is used, () no return

using functional component in other
<HeadingComponent />
or
<HeadingComponent> </HeadingComponent>
==========================================================================
Difference b/w using React Element & React Component syntax difference only arrow function and while rendering

//React Element
const heading = (
    <h1 id="heading" tabIndex="2" className="Heading"> Namaste React using JSX </h1>
);

//React Functional Component
const HeadingComponent = () => (
    <h1>Namaste React using Functional Component</h1>
)


const root = ReactDOM.createRoot(document.getElementById("root"));

//rendering React Element
root.render(heading);

//rendering React Component
root.render(<HeadingComponent />);
==========================================================================
Component Composition: Using a component inside other component
import React from "react";
import ReactDOM from "react-dom/client";

const Title = () => (
    <h1 className="head" tabIndex="5"> Namaste React using JSX ðŸš€ </h1>
);

const HeadingComponent = () => (
    <div id="container">
        <Title />
        <h1>Namaste React using Functional Component</h1>
    </div>
);
const root = ReactDOM.createRoot(document.getElementById("root"));

//rendering React Component
root.render(<HeadingComponent />);
==========================================================================
in jsx, putting something in {} can run any js expression
const number = 1000;
const Heading = () => (
    <div id="container">
        {number}
        <h1 className="heading">Namaste React Functional component</h1>
    </div>
);

As, React Element(js object) is also a js variable similar to number we can use same way
const title = (
    <h1 className="head" tabIndex="5">Namaste React using JSX ðŸš€ </h1>
);

const Heading = () => (
    <div id="container">
        {title}
        <h1 className="heading">Namaste React Functional component</h1>
    </div>
);
==========================================================================
adding react element inside react element

const reactElementSample = <span>sample react element</span>;
const title = (
    <h1 className="head" tabIndex="5"> {reactElementSample} Namaste React using JSX ðŸš€ </h1>
);

==========================================================================
Mix of React Element and functional component
const reactElementSample = <span>sample react element</span>;
const title = (
    <h1 className="head" tabIndex="5"> {reactElementSample} Namaste React using JSX ðŸš€ </h1>
);

const Heading = () => (
    <div id="container">
        {title}
        <h1 className="heading">Namaste React Functional component</h1>
    </div>
);

const reactElementWithComponent = (
    <div>
        <Heading /> <span>we are using Functional component in React Element</span>
    </div>
);
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render( reactElementWithComponent);
==========================================================================
jsx sanitizes external data
